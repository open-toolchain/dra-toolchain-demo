---
defaultBaseImageVersion: latest
stages:
- name: BUILD
  inputs:
  - type: git
    branch: ${APP_REPO_BRANCH}
    service: ${DEMODRA_API_REPO}
  triggers:
  - type: commit
  properties:
  - name: MY_BUILD_NUMBER
    value: $GIT_BRANCH:$BUILD_NUMBER
    type: text
  jobs:
  - name: Build
    type: builder
    artifact_dir: ''
    build_type: shell
    script: |-
      #!/bin/bash
      npm install
      npm run build
      grunt_result=$?

      build_status="pass"
      if [ $grunt_result -ne 0 ]; then
         build_status="fail"
      fi

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      echo "MY_BUILD_NUMBER=${MY_BUILD_NUMBER}" >> $ARCHIVE_DIR/build.properties

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishbuildrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --branch=$GIT_BRANCH --repositoryurl=$GIT_URL --commitid=$GIT_COMMIT --status=$build_status
  - name: Unit Test and Code Coverage
    type: tester
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v15.14.0/bin:$PATH
      npm install

      set +e
      npm run testcov
      grunt_result=$?
      set -e

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishtestrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --filelocation=./mochatest.json --type=unittest
      ibmcloud doi publishtestrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --filelocation=./tests/coverage-summary.json --type=code

      if [ $grunt_result -ne 0 ]; then
         exit $grunt_result
      fi
- name: STAGING
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${STAGING_REGION_ID}
      organization: ${STAGING_ORG_NAME}
      space: ${STAGING_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash

      # Push app
      export CF_APP_NAME="staging-$CF_APP"
      cf push "${CF_APP_NAME}" -f manifest-test.yml
      push_result=$?
      export APP_URL=https://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent

      deploy_status="pass"
      if [ $push_result -ne 0 ]; then
         deploy_status="fail"
      fi

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishdeployrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --env=STAGING --status=$deploy_status
  - name: FVT Test
    type: tester
    script: |-
      #!/bin/bash
      export PATH=/opt/IBM/node-v15.14.0/bin:$PATH
      npm install

      #Install chrome
      apt install -y openjdk-11-jdk && \
      apt-get install -y libdbusmenu-gtk3-4 libappindicator3-1 libgtk-3-0 libxss1 xdg-utils fonts-liberation && \
      wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb -P /tmp/ && \
      dpkg -i /tmp/google-chrome*.deb

      set +e
      npm run fvt
      grunt_result=$?
      set -e

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishtestrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --filelocation=./junitfvt.xml --type=fvt

      if [ $grunt_result -ne 0 ]; then
         exit $grunt_result
      fi
- name: GATE
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  jobs:
  - name: Gate
    type: tester
    script: |-
      #!/bin/bash

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
         ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi evaluategate --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --policy "Weather Unit Test, Code Coverage, and FVT Checks" --forcedecision
- name: PRODUCTION
  inputs:
  - type: job
    stage: BUILD
    job: Build
  triggers:
  - type: stage
  properties:
  - name: CF_APP_NAME
    value: undefined
    type: text
  - name: APP_URL
    value: undefined
    type: text
  jobs:
  - name: Deploy
    type: deployer
    target:
      region_id: ${PROD_REGION_ID}
      organization: ${PROD_ORG_NAME}
      space: ${PROD_SPACE_NAME}
      application: ${CF_APP_NAME}
      api_key: ${API_KEY}
    script: |
      #!/bin/bash

      # Push app
      export CF_APP_NAME="$CF_APP"
      cf push "${CF_APP_NAME}" -f manifest.yml
      push_result=$?
      export APP_URL=https://$(cf app $CF_APP_NAME | grep -e urls: -e routes: | awk '{print $2}')
      # View logs
      #cf logs "${CF_APP_NAME}" --recent

      deploy_status="pass"
      if [ $push_result -ne 0 ]; then
         deploy_status="fail"
      fi

      # need to set the ibmcloud api for staging env. The value defaults to cloud.ibm.com
      export match=`echo $IDS_URL | grep test`
      if [ $match ]; then
          ibmcloud api test.cloud.ibm.com
      fi

      ibmcloud plugin install doi -f
      ibmcloud login --apikey $API_KEY --no-region
      ibmcloud doi publishdeployrecord --logicalappname="$MY_APP_NAME" --buildnumber=$MY_BUILD_NUMBER --env=PRODUCTION --status=$deploy_status
properties:
- name: API_KEY
  value: ${API_KEY}
  type: secure
- name: MY_APP_NAME
  value: ${LOGICAL_APP_NAME}
  type: text
- name: buildProperties
  value: build.properties
  type: file
- name: APP_REPO_BRANCH
  value: ${APP_REPO_BRANCH}
  type: text
  default: master
